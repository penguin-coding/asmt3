abline(0,A$coefficients)
pred.time <- function(s){     # We write a very simple function
secs <- A$coefficients*s    # which returns the expected
mins <- secs/60             # calculation time for s simulations
hours <- mins/60            # per case, based on our observed
return(hours)               # values
}
plot.x = seq(1,2000)        # we plot expected calculation times
plot.y = pred.time(plot.x)  # so that we can choose how many to use
plot(plot.x, plot.y, xlab = 'number of simulations per case',
ylab = 'Time for all simulations to run - hours',
type='l',
main = 'Predicted calculation times for 1.51GHz CPU')
source('simulation.r')
dosims <- function(x,sample.n,boot.n){
norm.sim <- simulation(dist.func=rnorm,
simulations=x,
sample.n=sample.n,
boot.n=boot.n,
boot.method=
c('percentile','BCa','parametric','smooth'),
stat.func=mean,
smooth.sd=0.1)
pois.sim <- simulation(dist.func=rpois,
simulations=x,
sample.n=sample.n,
boot.n=boot.n,
boot.method=
c('percentile','BCa','parametric','smooth'),
stat.func=mean,
smooth.sd=0.1,
lambda=100)
gamm.sim <- simulation(dist.func=rgamma,
simulations=x,
sample.n=sample.n,
boot.n=boot.n,
boot.method=c('percentile','BCa','smooth'),
stat.func=mean,
smooth.sd=0.1,
shape=3,
rate=10)
smooth.sd <- seq(0.01,0.25,length=10)
smoot.sim <- as.list(rep(NA, length(smooth.sd)))
counter = 0
for (i in smooth.sd){
counter = counter + 1
sim <- simulation(dist.func=rnorm,
simulations=x,
sample.n=500,
boot.n=999,
boot.method='smooth',
stat.func=mean,
smooth.sd=smooth.sd[counter])
smoot.sim[[counter]] <- sim[1,1,1,]
}
return()
}
get.time = function(x,sample.n,boot.n){
return(system.time(dosims(x,sample.n,boot.n))[3])
}
x <- seq(2)
y <-  lapply(x, get.time, sample.n=c(50,100,500,1999), boot.n=c(99,199,499,999))
y <- unlist(y)
A = lm(y~x-1)  # We fit a lm with no intercept, and check
summary(A)     # it produces a reasonable answer.
plot(x,y)                    # We visualise the fitted line
abline(0,A$coefficients)
pred.time <- function(s){     # We write a very simple function
secs <- A$coefficients*s    # which returns the expected
mins <- secs/60             # calculation time for s simulations
hours <- mins/60            # per case, based on our observed
return(hours)               # values
}
plot.x = seq(1,2000)        # we plot expected calculation times
plot.y = pred.time(plot.x)  # so that we can choose how many to use
plot(plot.x, plot.y, xlab = 'number of simulations per case',
ylab = 'Time for all simulations to run - hours',
type='l',
main = 'Predicted calculation times for 1.51GHz CPU')
source('~/GitHub/asmt3/num.of.simulations.choice.r')
load("C:/Users/Cal/Documents/GitHub/asmt3/SimGlobEnv3.RData")
for (results in list(norm.results, pois.results, gamm.results)){
for (statistic in c('coverage','length','failure tendency')){
# to avoid "the condition has length > 1" warnings, we compare the first
# element only - which should be sufficient for our purposes:
if (results[1,1,1,1]==norm.results[1,1,1,1]){main <- 'normal'}
else if (results[1,1,1,1]==pois.results[1,1,1,1]){main <- 'poisson'}
else {main <- 'gamma'}
main <- paste(main, 'simulated deviates')
plot(results, statistic=statistic,main=main)
}
}
source('~/GitHub/asmt3/simulation.r')
for (results in list(norm.results, pois.results, gamm.results)){
for (statistic in c('coverage','length','failure tendency')){
# to avoid "the condition has length > 1" warnings, we compare the first
# element only - which should be sufficient for our purposes:
if (results[1,1,1,1]==norm.results[1,1,1,1]){main <- 'normal'}
else if (results[1,1,1,1]==pois.results[1,1,1,1]){main <- 'poisson'}
else {main <- 'gamma'}
main <- paste(main, 'simulated deviates')
plot(results, statistic=statistic, main=main)
}
}
print(smoot.sim)
?array
smooth.stats <- array(dim=c(length(smoot.sim),3))
for (i in 1:length(smoot.sim)){
cov <- get.coverage(smoot.sim)
len <- get.length(smoot.sim)
f.t <- get.coverage(smoot.sim)
smooth.stats[i,] <- c(cov,len,f.t)
}
get.coverage()
get.coverage
for (i in 1:length(smoot.sim)){
cov <- get.coverage(smoot.sim,0)
len <- get.length(smoot.sim)
f.t <- get.coverage(smoot.sim,0,failure.t = T)
smooth.stats[i,] <- c(cov,len,f.t)
}
for (i in 1:length(smoot.sim)){
cov <- get.coverage(smoot.sim[[i]],0)
len <- get.length(smoot.sim[[i]])
f.t <- get.coverage(smoot.sim[[i]],0,failure.t = T)
smooth.stats[i,] <- c(cov,len,f.t)
}
smooth.stats
colnames(smooth.stats) <- smooth.sd
smooth.sd
length(smooth.sd)
dim(smoot.sim)
dim(smooth.stats)
rownames(smooth.stats) <- smooth.sd
smooth.stats
for (i in (1:3)){
ylab <-  switch(i, 1='coverage',2='length',3='failure tendency')
main <- 'Smooth bootstrap'
plot(smooth.sd, smooth.stats[,i],xlab = 'smooth.sd', ylab=ylab,main=main)
}
smooth.stats[5,1]
smooth.stats[5,2]
smooth.stats[5,3]
smooth.stats[,3]
for (i in 1:length(smoot.sim)){                         # we manually create a
cov <- get.coverage(smoot.sim[[i]],0)                 # a matrix of summary
len <- get.length(smoot.sim[[i]])                     # statistics for the
f.t <- get.coverage(smoot.sim[[i]],0,failure.t = T)   # simulation where only
smooth.stats[i,] <- c(cov,len,f.t)                    # the smooth.sd
}
smooth.stats[,1]
smooth.stats <- array(dim=c(length(smoot.sim),3))
for (i in 1:length(smoot.sim)){                         # we manually create a
cov <- get.coverage(smoot.sim[[i]],0)                 # a matrix of summary
len <- get.length(smoot.sim[[i]])                     # statistics for the
f.t <- get.coverage(smoot.sim[[i]],0,failure.t = T)   # simulation where only
smooth.stats[i,] <- c(cov,len,f.t)                    # the smooth.sd
}
smooth.stats[,1]
smooth.stats <- array(dim=c(length(smoot.sim),3))
for (i in 1:length(smoot.sim)){                         # we manually create a
cov <- get.coverage(smoot.sim[[i]],0)                 # a matrix of summary
len <- get.length(smoot.sim[[i]])                     # statistics for the
f.t <- get.coverage(smoot.sim[[i]],0,failure.t = T)   # simulation where only
smooth.stats[i,] <- c(cov,len,f.t)                    # the smooth.sd
}
smooth.stats[1,1]
smooth.stats[1,2]
smooth.stats[1,3]
smooth.stats[1,]
for (i in (1:3)){
ylab <-  switch(i, 1='coverage',2='length',3='failure tendency')
main <- 'Smooth bootstrap'
plot(smooth.sd, smooth.stats[,i],xlab = 'smooth.sd', ylab=ylab,main=main)
}
smooth.stats[,1]
smooth.stats[,2]
smooth.stats[,3]
for (i in 1:3){
ylab <-  switch(i, 1='coverage', 2='length', 3='failure tendency')
main <- 'Smooth bootstrap'
print(i)
print(smooth.stats[,i])
plot(smooth.sd, smooth.stats[,i],xlab = 'smooth.sd', ylab=ylab, main=main)
}
for (i in 1:3){
ylab <-  switch(i, 1='coverage', 2='length', 3='failure tendency')
main <- 'Smooth bootstrap'
print(i)
print(smooth.stats)
plot(smooth.sd, smooth.stats[,i],xlab = 'smooth.sd', ylab=ylab, main=main)
}
for (i in 1:3){
ylab <-  switch(i, 1='coverage', 2='length', 3='failure tendency')
main <- 'Smooth bootstrap'
print(i)
print(smooth.stats)
plot(smooth.sd, smooth.stats[,i],xlab = 'smooth.sd', ylab=ylab, main=main)
}
for (i in 1:3){
ylab <-  switch(i, 1='coverage', 2='length', 3='failure tendency')
A = 1
switch(A, 1='cow', 3='goat')
switch(A, '1'='cow', '3'='goat')
for (i in 1:3){
ylab <-  switch(i, '1'='coverage', '2'='length', '3'='failure tendency')
main <- 'Smooth bootstrap'
print(i)
print(smooth.stats)
plot(smooth.sd, smooth.stats[,i],xlab = 'smooth.sd', ylab=ylab, main=main)
}
for (i in 1:3){
ylab <-  switch(i, '1'='coverage', '2'='length', '3'='failure tendency')
main <- 'Smooth bootstrap'
plot(smooth.sd, smooth.stats[,i],xlab = 'smooth.sd', ylab=ylab, main=main,
type='l',col=4)
}
for (i in 1:3){
ylab <-  switch(i, '1'='coverage', '2'='length', '3'='failure tendency')
main <- 'Smooth bootstrap'
y <- smooth.stats[,i]
plot(smooth.sd, y,xlab = 'smooth.sd', ylab=ylab, main=main,
col=4)
lines(density(y))
}
for (i in 1:3){
ylab <-  switch(i, '1'='coverage', '2'='length', '3'='failure tendency')
main <- 'Smooth bootstrap'
y <- smooth.stats[,i]
plot(smooth.sd, y,xlab = 'smooth.sd', ylab=ylab, main=main,
col=4)
lines(density(y),add=T)
}
for (i in 1:3){
ylab <-  switch(i, '1'='coverage', '2'='length', '3'='failure tendency')
main <- 'Smooth bootstrap'
y <- smooth.stats[,i]
plot(smooth.sd, y,xlab = 'smooth.sd', ylab=ylab, main=main,
col=4)
lines(density(y))
}
for (i in 1:3){
ylab <-  switch(i, '1'='coverage', '2'='length', '3'='failure tendency')
main <- 'Smooth bootstrap'
y <- smooth.stats[,i]
plot(smooth.sd, y,xlab = 'smooth.sd', ylab=ylab, main=main,
col=4)
lines(density(y))
}
for (i in 1:3){
ylab <-  switch(i, '1'='coverage', '2'='length', '3'='failure tendency')
main <- 'Smooth bootstrap'
y <- smooth.stats[,i]
plot(smooth.sd, y,xlab = 'smooth.sd', ylab=ylab, main=main,
col=4)
lines(loess(x~y))
}
for (i in 1:3){
ylab <-  switch(i, '1'='coverage', '2'='length', '3'='failure tendency')
main <- 'Smooth bootstrap'
y <- smooth.stats[,i]
plot(smooth.sd, y,xlab = 'smooth.sd', ylab=ylab, main=main,
col=4)
lines(loess(smooth.sd~y))
}
for (i in 1:3){
ylab <-  switch(i, '1'='coverage', '2'='length', '3'='failure tendency')
main <- 'Smooth bootstrap'
y <- smooth.stats[,i]
plot(smooth.sd, y,xlab = 'smooth.sd', ylab=ylab, main=main,
col=4)
plot(loess(smooth.sd~y))
}
source('~/GitHub/asmt3/driver.R')
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(1,100)
y = seq(1,100)
z = matrix(HB.haz(x,y,1,1),ncol=100,nrow=100)
pers3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(1,100)
y = seq(1,100)
z = matrix(HB.haz(x,y,1,1),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(1,1,length=100)
y = seq(1,1, length=100)
z = matrix(HB.haz(x,y,1,1),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0,1,length=100)
y = seq(0,1, length=100)
z = matrix(HB.haz(x,y,1,1),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.1,1,length=100)
y = seq(0.1,1, length=100)
z = matrix(HB.haz(x,y,1,1),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.5,length=100)
y = seq(0.01,0.5, length=100)
z = matrix(HB.haz(x,y,1,1),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.1,length=100)
y = seq(0.01,0.1, length=100)
z = matrix(HB.haz(x,y,1,1),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,1,1),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.001,0.01,length=100)
y = seq(0.001,0.01, length=100)
z = matrix(HB.haz(x,y,1,1),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.001,0.05,length=100)
y = seq(0.001,0.05, length=100)
z = matrix(HB.haz(x,y,1,1),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,1,1),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,0,1),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,0.1,1),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,5,1),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,5,5),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,5,-5),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,5,-2),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,5,-3),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,5,0),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,5,-1),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,5,-0.5),ncol=100,nrow=100)
persp3D(x,y,z)
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,5,-0.5),ncol=100,nrow=100)
persp3D(x,y,z,zlab='Hazard of detection')
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,5,-0.5),ncol=100,nrow=100)
persp3D(x,y,z,zlab='Hazard of detection',main='HB Hazard Function')
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,1,-0.5),ncol=100,nrow=100)
persp3D(x,y,z,zlab='Hazard of detection',main='HB Hazard Function')
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,-4,-0.5),ncol=100,nrow=100)
persp3D(x,y,z,zlab='Hazard of detection',main='HB Hazard Function')
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,-2,-0.5),ncol=100,nrow=100)
persp3D(x,y,z,zlab='Hazard of detection',main='HB Hazard Function')
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,-1,-0.5),ncol=100,nrow=100)
persp3D(x,y,z,zlab='Hazard of detection',main='HB Hazard Function')
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,0.5,-0.5),ncol=100,nrow=100)
persp3D(x,y,z,zlab='Hazard of detection',main='HB Hazard Function')
HB.haz <- function(x,y,theta1,theta2){
return(theta1*(x**2+y**2)**(-(theta2+2)/2))
}
x = seq(0.01,0.05,length=100)
y = seq(0.01,0.05, length=100)
z = matrix(HB.haz(x,y,0.1,-0.5),ncol=100,nrow=100)
persp3D(x,y,z,zlab='Hazard of detection',main='HB Hazard Function')
pi.cn <- function(x,theta1) (1-exp(-x**2/(2*theta1**2)))
curve(pi.cn(x,theta1 = 1))
curve(pi.cn(x,theta1 = 10))
curve(pi.cn(x,theta1 = 11))
curve(pi.cn(x,theta1 = 1))
curve(pi.cn(x,theta1 = 0.5))
curve(pi.cn(x,theta1 = 0.3))
pi.cn <- function(x,theta1,w){
num = (1-exp(-x**2/(2*theta1**2)))
num2 = w - integrate(1-exp(-x**2/(2*theta1**2)),0,w)$value
return(num*num2)
}
curve(pi.cn(x,theta1 = 0.3, w = 1))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
curve(pi.cn(x,theta1 = 0.3, w = 1))
pi.cn <- function(x,theta1,w){
f <- function(x,theta1) (1-exp(-x**2/(2*theta1**2)))
num = f(x,theta1)
num2 = w - integrate(f,0,w,theta1=theta1)$value
return(num*num2)
}
curve(pi.cn(x,theta1 = 0.3, w = 1))
curve(pi.cn(x,theta1 = 0.3, w = 1))
curve(pi.cn(x,theta1 = 5, w = 1))
curve(pi.cn(x,theta1 = -5, w = 1))
curve(pi.cn(x,theta1 = 5, w = 1))
curve(pi.cn(x,theta1 = 0.3, w = 1))
curve(pi.cn(x,theta1 = 0.3, w = 0.5))
curve(pi.cn(x,theta1 = 0.3, w = 10))
curve(pi.cn(x,theta1 = 0.3, w = 100))
curve(pi.cn(x,theta1 = 0.3, w = 1))
curve(pi.cn(x,theta1 = 0.3, w = 0.8))
curve(pi.cn(x,theta1 = 0.3, w = 0.8),ylab='y')
