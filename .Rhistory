x1 <- x2 <- seq(-10, 10, length = 51)
dens <- matrix(mvdnorm(expand.grid(x1, x2),
sigma = rbind(c(3, 2), c(2, 3))),
ncol = length(x1))
?mvtnorm
??mvtnorm
x1 <- x2 <- seq(-10, 10, length = 51)
dens <- matrix(mvnorm(expand.grid(x1, x2),
sigma = rbind(c(3, 2), c(2, 3))),
ncol = length(x1))
library("mvtnorm")
x1 <- x2 <- seq(-10, 10, length = 51)
dens <- matrix(mvnorm(expand.grid(x1, x2),
sigma = rbind(c(3, 2), c(2, 3))),
ncol = length(x1))
x1 <- x2 <- seq(-10, 10, length = 51)
dens <- matrix(mvtnorm(expand.grid(x1, x2),
sigma = rbind(c(3, 2), c(2, 3))),
ncol = length(x1))
library("mvtnorm")
library('scatterplot3d')
x1 <- x2 <- seq(-10, 10, length = 51)
dens <- matrix(dmvnorm(expand.grid(x1, x2),
sigma = rbind(c(3, 2), c(2, 3))),
ncol = length(x1))
s3d <- scatterplot3d(x1, x2, seq(min(dens), max(dens),
length = length(x1)),
type = "n", grid = FALSE, angle = 70,
zlab = expression(f(x[1], x[2])),
xlab = expression(x[1]),
ylab = expression(x[2]),
main = "Bivariate normal distribution")
for(i in length(x1):1){
s3d$points3d(rep(x1[i], length(x2)), x2, dens[i,], type = "l")}
for(i in length(x2):1){s3d$points3d(x1, rep(x2[i], length(x1)),
dens[,i], type = "l")}
s3d <- scatterplot3d(x1, x2, seq(min(dens), max(dens),
length = length(x1)),
type = "n", grid = FALSE, angle = 70,
zlab = expression(f(x[1], x[2])),
xlab = expression(x[1]),
ylab = expression(x[2]),
main = "Bivariate normal distribution")
for(i in length(x1):1){
s3d$points3d(rep(x1[i], length(x2)), x2, dens[i,], type = "l")}
for(i in length(x2):1){s3d$points3d(x1, rep(x2[i], length(x1)),
dens[,i], type = "l")}
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='coverage',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='coverage',method=2)
x1 <- x2 <- seq(-10, 10, length = 51)
dens <- matrix(dmvnorm(expand.grid(x1, x2),
sigma = rbind(c(3, 2), c(2, 3))),
ncol = length(x1))
dim(dens)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='coverage',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='coverage',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='coverage',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='coverage',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='coverage',method=2)
A = matrix(seq(25),nrow=5)
A
A[A==25]
A[A==25=3]
A[A==25]=NA
A
A[A==11] <- NA
A
A[is.na(A)] <- 500
A
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='coverage',method=2)
?expand.grid
expand.grid(c(1,2,3,4,5),c(1,5,7,8,9,11,15))
x1 <-  seq(-10, 10, length = 51)
x2 <-  seq(-5,5, length=30)
dens <- matrix(dmvnorm(expand.grid(x1, x2),
sigma = rbind(c(3, 2), c(2, 3))),
ncol = length(x1))
s3d <- scatterplot3d(x1, x2, seq(min(dens), max(dens),
length = length(x1)),
type = "n", grid = FALSE, angle = 70,
zlab = expression(f(x[1], x[2])),
xlab = expression(x[1]),
ylab = expression(x[2]),
main = "Bivariate normal distribution")
interp
?interp
interp(x,y,z)
source('~/GitHub/asmt3/simulation.r')
interp(x,y,z)
A = interp(x,y,z)
A$x
A$y
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='coverage',method=2)
interp(rnorm(100),rnorm(100),rnorm(100))
?interp
?presp
?persp
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='coverage',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='coverage',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='coverage',method=2)
sim.plot.3D(norm.results,statistic='length',method=2)
sim.plot.3D(norm.results,statistic='length',method=1)
sim.plot.3D(norm.results,statistic='failure tendency',method=1)
sim.plot.3D(norm.results,statistic='failure tendency',method=2)
sim.plot.3D(norm.results,statistic='failure tendency',method=3)
sim.plot.3D(norm.results,statistic='failure tendency',method=4)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='failure tendency',method=4)
sim.plot.3D(norm.results,statistic='failure tendency',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='failure tendency',method=2)
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
x = runif(100,0,10)
y = runif(1000,0,40)
z = x**2 + 3*y
contour(x,y,z)
x = seq(0,10,100)
y = seq(0,10,1000)
y = matrix(x**2 + y, ncol=length(y))
y
y
x
x = seq(0,10,length=100)
y = seq(0,10,length=1000)
z = matrix(x**2 + y, ncol=length(y))
z
persp(x,y,z)
z = matrix(x**2 + y, nrow=length(y))
persp(x,y,z)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
A
A = matrix(seq(25))
A[A<10]=NA
A
A = matrix(seq(25),nrow=5)
A[A<10]=NA
A
#
A
A[is.na(A)]=100
A
mean(A)
A[A==10] = NA
A
mean(A)
mean(na.omit(A))
source('~/GitHub/asmt3/simulation.r')
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
?contour3D
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
sim.plot.3D(norm.results,statistic='length',method=2)
source('~/GitHub/asmt3/simulation.r')
source('~/GitHub/asmt3/simulation.r')
source('~/GitHub/asmt3/driver.R')
for (method in 1:4){
for (statistic in c('coverage','length','failure tendency')){
sim.plot.3D(norm.results, statistic=statistic, method=method)
}
}
source('~/GitHub/asmt3/simulation.r')
for (method in 1:4){
for (statistic in c('coverage','length','failure tendency')){
sim.plot.3D(norm.results, statistic=statistic, method=method)
}
}
source('~/GitHub/asmt3/simulation.r')
for (method in 1:4){
for (statistic in c('coverage','length','failure tendency')){
sim.plot.3D(norm.results, statistic=statistic, method=method)
}
}
source('~/GitHub/asmt3/simulation.r')
for (method in 1:4){
for (statistic in c('coverage','length','failure tendency')){
sim.plot.3D(norm.results, statistic=statistic, method=method)
}
}
norm.results[,,3,3]
source('~/GitHub/asmt3/driver.R')
for (method in 1:4){
for (statistic in c('coverage','length','failure tendency')){
# Because parametric bootstraps have a coverage of 1 in these simulations,
# the failure tendency is NaN, since there are no failures. Hence we skip
# this case to avoid errors with plot.sim.3D:
if (statistic=='failure tendency' & method==3) next
sim.plot.3D(norm.results, statistic=statistic, method=method)
}
}
for (method in 1:4){
for (statistic in c('coverage','length','failure tendency')){
# Because parametric bootstraps have a coverage of 1 in these simulations,
# the failure tendency is NaN, since there are no failures. Hence we skip
# this case to avoid errors with plot.sim.3D:
if (statistic=='failure tendency' & method==3) next
sim.plot.3D(norm.results, statistic=statistic, method=method)
}
}
for (method in 1:4){
for (statistic in c('coverage','length','failure tendency')){
# Because parametric bootstraps have a coverage of 1 in these simulations,
# the failure tendency is NaN, since there are no failures. Hence we skip
# this case to avoid errors with plot.sim.3D:
if (statistic=='failure tendency' & method==3) next
sim.plot.3D(norm.results, statistic=statistic, method=method)
}
}
par(mfrow=c(1,4))
for (method in 1:4){
for (statistic in c('coverage','length','failure tendency')){
# Because parametric bootstraps have a coverage of 1 in these simulations,
# the failure tendency is NaN, since there are no failures. Hence we skip
# this case to avoid errors with plot.sim.3D:
if (statistic=='failure tendency' & method==3) next
sim.plot.3D(norm.results, statistic=statistic, method=method)
}
}
?persp3D
source('~/GitHub/asmt3/simulation.r')
par(mfrow=c(1,1))
for (method in 1:4){
for (statistic in c('coverage','length','failure tendency')){
# Because parametric bootstraps have a coverage of 1 in these simulations,
# the failure tendency is NaN, since there are no failures. Hence we skip
# this case to avoid errors with plot.sim.3D:
if (statistic=='failure tendency' & method==3) next
sim.plot.3D(norm.results, statistic=statistic, method=method)
}
}
source('~/GitHub/asmt3/simulation.r')
for (method in 1:4){
for (statistic in c('coverage','length','failure tendency')){
# Because parametric bootstraps have a coverage of 1 in these simulations,
# the failure tendency is NaN, since there are no failures. Hence we skip
# this case to avoid errors with plot.sim.3D:
if (statistic=='failure tendency' & method==3) next
sim.plot.3D(norm.results, statistic=statistic, method=method)
}
}
source('~/GitHub/asmt3/driver.R')
for (method in 1:4){
for (statistic in c('coverage','length','failure tendency')){
# Because parametric bootstraps have a coverage of 1 in these simulations,
# the failure tendency is NaN, since there are no failures. Hence we skip
# this case to avoid errors with plot.sim.3D:
if (statistic!='length' & method==3) next
sim.plot.3D(norm.results, statistic=statistic, method=method)
}
}
source('~/GitHub/asmt3/simulation.r')
for (method in 1:4){
for (statistic in c('coverage','length','failure tendency')){
# Because parametric bootstraps have a coverage of 1 in these simulations,
# the failure tendency is NaN, since there are no failures. Hence we skip
# this case to avoid errors with plot.sim.3D:
if (statistic!='length' & method==3) next
sim.plot.3D(norm.results, statistic=statistic, method=method, hist=F)
}
}
for (method in 1:4){
for (statistic in c('coverage','length','failure tendency')){
# Because parametric bootstraps have a coverage of 1 in these simulations,
# the failure tendency is NaN, since there are no failures. Hence we skip
# this case to avoid errors with plot.sim.3D:
if (statistic!='length' & method==3) next
sim.plot.3D(norm.results, statistic=statistic, method=method, hist=T)
}
}
source('~/GitHub/asmt3/driver.R')
for (method in 1:4){
for (statistic in c('failure tendency')){
# Because parametric bootstraps have a coverage of 1 in these simulations,
# the failure tendency is NaN, since there are no failures. Hence we skip
# this case to avoid errors with plot.sim.3D:
if (statistic!='length' & method==3) next
sim.plot.3D(norm.results, statistic=statistic, method=method, hist=T)
}
}
for (method in 1:4){
for (statistic in c('failure tendency')){
# Because parametric bootstraps have a coverage of 1 in these simulations,
# the failure tendency is NaN, since there are no failures. Hence we skip
# this case to avoid errors with plot.sim.3D:
if (statistic!='length' & method==3) next
sim.plot.3D(norm.results, statistic=statistic, method=method, hist=F)
}
}
for (results in list(norm.results, pois.results)){
for (statistic in c('coverage','length','failure tendency')){
plot(results, statistic=statistic)
}
}
source('~/GitHub/asmt3/driver.R')
?dgamma
?curve
curve(dgamma, from = 0, to = 10, shape = 1, rate = 3)
curve(dgamma, shape = 1, rate = 3)
curve(dgamma, shape = 5, rate = 3)
curve(dgamma(x), shape = 5, rate = 3)
curve(dgamma(x,shape,rate), shape = 5, rate = 3)
curve(dpois, from=0, to=10, lambda=10)
A = rnorm(30)
A = density(A)
plot(A)
hist(A, add=T)
A = rnorm(30)
D = density(A)
plot(D)
hist(A, add=T)
hist(A, add=T, freq=F)
plot(D)
hist(A, freq=F, add=T)
?density
plot(D)
plot(density(rnorm(30)))
plot(density(rnorm(30)))
plot(density(rnorm(30)))
plot(density(rnorm(30)))
plot(density(rnorm(30)))
plot(density(rnorm(100)))
plot(density(rnorm(100)))
plot(density(rnorm(100)))
plot(density(rnorm(100)))
plot(density(rnorm(100)))
plot(density(rnorm(1000)))
plot(density(rnorm(1000)))
plot(density(rnorm(10000)))
plot(density(rnorm(10000)))
plot(density(rnorm(10000)))
plot(density(rnorm(10000)))
plot(density(rnorm(10000)))
plot(density(rnorm(10000)))
plot(density(rnorm(10000)))
plot(density(rnorm(100000)))
plot(density(rnorm(100000)))
plot(density(rnorm(100000)))
plot(density(rnorm(100000)))
plot(density(rnorm(100000)))
plot(density(rnorm(100000)))
plot(density(rnorm(100000)))
plot(density(rnorm(100000)))
plot(density(rnorm(100000)))
plot(density(rnorm(100000)))
plot(density(rnorm(100000)))
plot(density(rnorm(100000)))
A  = density(rnorm(100000)))
A  = density(rnorm(100000))
A(3)
plot(density(rgamma(1000000,shape=1,rate=10)))
plot(density(rgamma(1000000,shape=10,rate=10)))
plot(density(rpois(1000000,lambda=10)))
plot(density(rpois(1000000,lambda=100)))
plot(density(rpois(1000000,lambda=10)))
plot(density(rpois(1000000,lambda=5)))
plot(density(rpois(1000000,lambda=500)))
plot(density(rgamma(1000000,shape=1,rate=10)))
plot(density(rgamma(1000000,shape=0.5,rate=10)))
plot(density(rgamma(1000000,shape=0.1,rate=10)))
plot(density(rgamma(1000000,shape=5,rate=10)))
plot(density(rgamma(1000000,shape=3,rate=10)))
gamm.sim <- simulation(dist.func=rgamma,
simulations=1000,
sample.n=1000,
boot.n=999,
boot.method=c('percentile','parametric','BCa','smooth'),
stat.func=mean,
smooth.sd=0.1,
shape=3,
rate=10)
gamm.sim <- simulation(dist.func=rgamma,
simulations=10,
sample.n=1000,
boot.n=999,
boot.method=c('percentile','parametric','BCa','smooth'),
stat.func=mean,
smooth.sd=0.1,
shape=3,
rate=10)
system.time(gamm.sim <- simulation(dist.func=rgamma,
simulations=10,
sample.n=1000,
boot.n=999,
boot.method=c('percentile','parametric','BCa','smooth'),
stat.func=mean,
smooth.sd=0.1,
shape=3,
rate=10))[3]
system.time(gamm.sim <- simulation(dist.func=rgamma,
simulations=20,
sample.n=1000,
boot.n=999,
boot.method=c('percentile','parametric','BCa','smooth'),
stat.func=mean,
smooth.sd=0.1,
shape=3,
rate=10))[3]
system.time(gamm.sim <- simulation(dist.func=rgamma,
simulations=20,
sample.n=100,
boot.n=999,
boot.method=c('percentile','parametric','BCa','smooth'),
stat.func=mean,
smooth.sd=0.1,
shape=3,
rate=10))[3]
system.time(gamm.sim <- simulation(dist.func=rgamma,
simulations=20,
sample.n=500,
boot.n=999,
boot.method=c('percentile','parametric','BCa','smooth'),
stat.func=mean,
smooth.sd=0.1,
shape=3,
rate=10))[3]
system.time(gamm.sim <- simulation(dist.func=rgamma,
simulations=100,
sample.n=500,
boot.n=999,
boot.method=c('percentile','parametric','BCa','smooth'),
stat.func=mean,
smooth.sd=0.1,
shape=3,
rate=10))[3]
gamm.results <- calculate.summaries(gamm.sim, 10)
gamm.results
gamm.results[1,1,1,]
gamm.results[1,1,,1]
gamm.results <- calculate.summaries(gamm.sim, 1/10)
gamm.results[1,1,,1]
gamm.sim[1,1,1,]
gamm.results <- calculate.summaries(gamm.sim, 3/10)
gamm.sim[1,1,1,]
gamm.results[1,1,1,]
gamm.results[1,1,,1]
gamm.results[1,1,,2]
gamm.results[1,1,,3]
gamm.sim <- simulation(dist.func=rgamma,
simulations=10,
sample.n=1000,
boot.n=1999,
boot.method=c('percentile','parametric','BCa','smooth'),
stat.func=mean,
smooth.sd=0.1,
shape=3,
rate=10)
gamm.results <- calculate.summaries(gamm.sim, 3/10)
gamm.results[1,1,,3]
gamm.results[1,1,,1]
# Partial simulation with gamma data, to look at failure tendency with an
# extremely skewed distribution. Exploratory analysis of the above data
# seemed to indicate there was no obvious relationship between sample size and
# failure tendency or between bootstrap resamples and failure tendency.
gamm.sim <- simulation(dist.func=rgamma,
simulations=100,
sample.n=1000,
boot.n=499,
boot.method=c('percentile','parametric','BCa','smooth'),
stat.func=mean,
smooth.sd=0.1,
shape=3,
rate=10)
smooth.values <- seq(0,1,length=30)
smooth.sim.coverage = smooth.sim.length <- rep(NA, length(smooth.values))
print(Sys.time())
gamm.results <- calculate.summaries(gamm.sim, 3/10)
gamm.results[1,1,,3]
source('~/GitHub/asmt3/driver.R')
